import{createClient as R}from"https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))o(a);new MutationObserver(a=>{for(const s of a)if(s.type==="childList")for(const n of s.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&o(n)}).observe(document,{childList:!0,subtree:!0});function t(a){const s={};return a.integrity&&(s.integrity=a.integrity),a.referrerPolicy&&(s.referrerPolicy=a.referrerPolicy),a.crossOrigin==="use-credentials"?s.credentials="include":a.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function o(a){if(a.ep)return;a.ep=!0;const s=t(a);fetch(a.href,s)}})();const C="https://ejrvyvyxyvysccpbrisq.supabase.co",I="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVqcnZ5dnl4eXZ5c2NjcGJyaXNxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY4MDkzNzYsImV4cCI6MjA2MjM4NTM3Nn0.q8cHoC6tOPDZPzNRYd09YhKcAxKPiq2gS3FID2rP-ic",m=R(C,I);class y{constructor(e){this.color=e,this.connections={},this.discovered=!1,this.x=0,this.y=0,this.monsters=[],this.upgradeUsed=!1}connect(e,t){this.connections[e]=t}isPurpleWithTrapdoor(){return this.color==="purple"}}class B{constructor(){this.setupRealtime(),this.loadLeaderboard(),this.level=1,this.playerHealth=3,this.playerDamage=1,this.maxHealth=8,this.maxDamage=5,this.revealTrapdoor=!1,this.combatMode=!1,this.inUpgradeMode=!1,this.visitedRooms=new Set,this.allRooms=[],this.gameOver=!1,this.hardMode=!1,this.mapSize=9,this.mapCenter=Math.floor(this.mapSize/2),this.normalLeaderboard=this.loadLeaderboard("normal"),this.hardLeaderboard=this.loadLeaderboard("hard"),this.currentLeaderboard="normal",this.currentRoom=this.generateLevel(),this.currentRoom.discovered=!0,this.visitedRooms.add(this.currentRoom),this.logMessage(`You are on level ${this.level}. You start in a ${this.currentRoom.color} room.`),this.updateRoomDisplay(),this.updateStatsDisplay(),this.initializeMap(),this.updateMap(),this.updateButtonStates(),this.initHardModeToggle(),this.initLeaderboardToggle()}initHardModeToggle(){const e=document.getElementById("hardModeToggle"),t=document.getElementById("hardModeStatus");document.getElementById("gameDisplay"),e.checked=this.hardMode,t.textContent=this.hardMode?"On":"Off",t.className=this.hardMode?"toggle-label hardmode-enabled":"toggle-label",e.addEventListener("change",o=>{if(this.level>1||this.combatMode||this.inUpgradeMode){this.logMessage("You can only change difficulty before starting a new game!","red"),e.checked=this.hardMode;return}this.hardMode=o.target.checked,t.textContent=this.hardMode?"On":"Off",t.className=this.hardMode?"toggle-label hardmode-enabled":"toggle-label",this.hardMode?this.logMessage("Hard Mode activated! Monsters will be stronger and health upgrades less effective.","red"):this.logMessage("Hard Mode deactivated. Standard difficulty applied."),this.restartGame()})}getPlayerId(){let e=localStorage.getItem("playerId");return e||(e=crypto.randomUUID(),localStorage.setItem("playerId",e)),e}initLeaderboardToggle(){const e=document.getElementById("btnNormalLeaderboard"),t=document.getElementById("btnHardLeaderboard"),o=a=>{this.currentLeaderboard=a?"hard":"normal",this.setupRealtime(),this.loadLeaderboard()};e.addEventListener("click",()=>{e.classList.add("active"),t.classList.remove("active"),o(!1)}),t.addEventListener("click",()=>{t.classList.add("active"),e.classList.remove("active"),o(!0)})}generateLevel(){let e=[];this.allRooms=[];for(let r=0;r<5;r++)e.push(new y("red"));e.push(new y("yellow")),e.push(new y("green")),e.push(new y("green"));const t=Math.floor(Math.random()*16);for(let r=0;r<t;r++)e.push(new y("red"));const o=5+t;if(o>11&&e.push(new y("yellow")),o===10){const r=Math.floor(Math.random()*4);for(let l=0;l<r;l++)e.push(new y("green"))}for(let r=e.length-1;r>0;r--){const l=Math.floor(Math.random()*(r+1));[e[r],e[l]]=[e[l],e[r]]}const a=["north","south","east","west"],s=new y("gray");s.x=this.mapCenter,s.y=this.mapCenter,this.allRooms.push(s);let n=[s],d=[s],c={};c[`${s.x},${s.y}`]=s;let f=!1,b=0;const E=Math.floor(e.length/2);for(;n.length>0&&(e.length>0||!f);){const r=n.shift();!f&&b>=E&&(f=!0,e.push(new y("purple")));for(const l of this.shuffleArray([...a])){if(e.length===0)break;let u=r.x,g=r.y;switch(l){case"north":g--;break;case"south":g++;break;case"east":u++;break;case"west":u--;break}const M=`${u},${g}`;if(c[M]||Math.abs(u-this.mapCenter)>3||Math.abs(g-this.mapCenter)>3)continue;const h=e.pop();h.x=u,h.y=g,b++,h.color==="red"&&this.addMonstersToRoom(h),this.allRooms.push(h),r.connect(l,h);let p;switch(l){case"north":p="south";break;case"south":p="north";break;case"east":p="west";break;case"west":p="east";break}h.connect(p,r),c[M]=h,d.push(h),n.push(h)}}for(let r=0;r<15;r++){const l=d[Math.floor(Math.random()*d.length)];for(const u of this.shuffleArray([...a])){if(l.connections[u])continue;let g=l.x,M=l.y;switch(u){case"north":M--;break;case"south":M++;break;case"east":g++;break;case"west":g--;break}const h=`${g},${M}`,p=c[h];if(p){let v;switch(u){case"north":v="south";break;case"south":v="north";break;case"east":v="west";break;case"west":v="east";break}if(!p.connections[v]){l.connect(u,p),p.connect(v,l);break}}}}return console.log(`Placed ${b} rooms on the map`),e.length>0&&console.log(`Warning: ${e.length} rooms weren't placed on the map`),s}addMonstersToRoom(e){if(e.color!=="red")return;let t=Math.floor(Math.random()*2)+1;this.level>10&&Math.random()<.7&&(t+=1),this.hardMode&&Math.random()<.4&&(t+=1),t=Math.min(t,this.hardMode?4:3);let o=3;o+=Math.floor(this.level/5),this.hardMode&&(o+=1);for(let a=0;a<t;a++){const s=Math.floor(Math.random()*3)-1,n=Math.max(2,o+s),d=this.hardMode?.03:.01;e.monsters.push({health:n,maxHealth:n,hitChance:.2+this.level*d})}}shuffleArray(e){for(let t=e.length-1;t>0;t--){const o=Math.floor(Math.random()*(t+1));[e[t],e[o]]=[e[o],e[t]]}return e}initializeMap(){const e=document.getElementById("map");e.innerHTML="";for(let t=0;t<this.mapSize;t++)for(let o=0;o<this.mapSize;o++){const a=document.createElement("div");a.className="map-cell",a.id=`map-${o}-${t}`,e.appendChild(a)}}updateMap(){for(let e=0;e<this.mapSize;e++)for(let t=0;t<this.mapSize;t++){const o=document.getElementById(`map-${t}-${e}`);o.innerHTML=""}for(const[e,t]of Object.entries(this.currentRoom.connections))if(!this.visitedRooms.has(t)){const o=t.x-this.currentRoom.x+this.mapCenter,a=t.y-this.currentRoom.y+this.mapCenter;if(o>=0&&o<this.mapSize&&a>=0&&a<this.mapSize){const s=document.getElementById(`map-${o}-${a}`),n=document.createElement("div");n.className=`map-room ${t.color} unexplored-room`,s.appendChild(n);const d=this.getOppositeDirection(e),c=document.createElement("div");c.className=`map-connection map-${d}`,c.style.opacity="0.5",s.appendChild(c);const f=document.getElementById(`map-${this.mapCenter}-${this.mapCenter}`),b=document.createElement("div");b.className=`map-connection map-${e}`,b.style.opacity="0.5",f.appendChild(b)}}this.visitedRooms.forEach(e=>{const t=e.x-this.currentRoom.x+this.mapCenter,o=e.y-this.currentRoom.y+this.mapCenter;if(t>=0&&t<this.mapSize&&o>=0&&o<this.mapSize){const a=document.getElementById(`map-${t}-${o}`),s=document.createElement("div");s.className=`map-room ${e.color}`,e===this.currentRoom&&s.classList.add("map-current"),this.revealTrapdoor&&e.isPurpleWithTrapdoor()&&(s.innerHTML=""),a.appendChild(s);for(const[n,d]of Object.entries(e.connections))if(this.visitedRooms.has(d)){const c=document.createElement("div");c.className=`map-connection map-${n}`,a.appendChild(c)}}}),this.revealTrapdoor&&this.allRooms.forEach(e=>{if(e.isPurpleWithTrapdoor()){const t=e.x-this.currentRoom.x+this.mapCenter,o=e.y-this.currentRoom.y+this.mapCenter;if(t>=0&&t<this.mapSize&&o>=0&&o<this.mapSize){const a=document.getElementById(`map-${t}-${o}`);let s=a.querySelector(".map-room");s||(s=document.createElement("div"),s.className=`map-room ${e.color}`,this.visitedRooms.has(e)||s.classList.add("unexplored-room"),a.appendChild(s)),s.innerHTML=""}}})}getOppositeDirection(e){switch(e){case"north":return"south";case"south":return"north";case"east":return"west";case"west":return"east";default:return e}}move(e){if(this.combatMode){this.logMessage("You can't move while in combat! Defeat the monsters first.");return}if(this.inUpgradeMode){this.logMessage("Choose an upgrade first before moving!");return}e in this.currentRoom.connections?(this.currentRoom=this.currentRoom.connections[e],this.currentRoom.discovered=!0,this.visitedRooms.add(this.currentRoom),this.logMessage(`You moved ${e} to a ${this.currentRoom.color} room.`),this.currentRoom.color==="red"&&this.currentRoom.monsters.length>0&&this.enterCombatMode(),this.currentRoom.color==="yellow"&&!this.currentRoom.upgradeUsed&&this.enterUpgradeMode(),this.updateRoomDisplay(),this.updateMap(),this.updateButtonStates()):this.logMessage(`You can't go ${e}. There's no passage that way.`)}goDown(){if(this.currentRoom.color!=="purple"){this.logMessage("You can't go down from here. Find a purple room with a trapdoor.");return}this.level++,this.logMessage(`You found a trapdoor and descended to level ${this.level}.`),this.revealTrapdoor=!1,this.visitedRooms=new Set,this.currentRoom=this.generateLevel(),this.currentRoom.discovered=!0,this.visitedRooms.add(this.currentRoom),this.updateRoomDisplay(),this.updateStatsDisplay(),this.initializeMap(),this.updateMap(),this.updateButtonStates()}enterCombatMode(){this.combatMode=!0,this.logMessage("Monsters! Get ready to fight!","red"),this.updateButtonStates(),this.displayMonsters()}exitCombatMode(){this.combatMode=!1,this.updateButtonStates();const e=document.getElementById("combatControls");e&&e.remove(),document.getElementById("monsterContainer").innerHTML=""}displayMonsters(){const e=document.getElementById("monsterContainer"),t=document.getElementById("actionButtons");e.innerHTML="";let o=document.getElementById("combatControls");if(!o){o=document.createElement("div"),o.id="combatControls",o.className="combat-controls";const a=document.createElement("button");a.id="btnAttack",a.className="btn",a.textContent="Attack",a.addEventListener("click",()=>this.attackRandomMonster()),o.appendChild(a),t.appendChild(o)}this.currentRoom.monsters.forEach((a,s)=>{const n=document.createElement("div");n.className="monster monster-float",n.innerHTML=`
            <div class="monster-icon"></div>
            <div class="monster-health">
                ${Array(a.health).fill('<span class="monster-heart">♥</span>').join("")}
            </div>
        `,document.getElementById("actionButtons").appendChild(o),n.dataset.index=s;const d=Math.random()*20+330;n.style.backgroundColor=`hsl(${d}, 70%, 40%)`,n.style.borderColor=`hsl(${d}, 70%, 30%)`;const c=.8+a.health*.1;n.style.transform=`scale(${c})`,n.addEventListener("click",()=>this.attackMonster(s)),e.appendChild(n)})}attackRandomMonster(){if(!this.combatMode||this.currentRoom.monsters.length===0)return;const e=Math.floor(Math.random()*this.currentRoom.monsters.length);this.attackMonster(e)}attackMonster(e){if(!this.combatMode)return;const t=this.currentRoom.monsters[e];if(!(!t||this.playerHealth<=0)){if(t.health-=this.playerDamage,this.logMessage(`You hit the monster for ${this.playerDamage} damage!`),t.health<=0){if(this.currentRoom.monsters.splice(e,1),this.logMessage("You defeated a monster!"),this.displayMonsters(),this.currentRoom.monsters.length===0){this.logMessage("You've cleared the room of all monsters!");const o=document.getElementById("combatControls");o&&o.remove(),this.exitCombatMode()}return}this.displayMonsters(),this.monsterAttack()}}monsterAttack(){let e=0;if(this.currentRoom.monsters.forEach(t=>{Math.random()<t.hitChance&&(this.hardMode&&Math.random()<.15?(e+=2,this.logMessage("A monster landed a critical hit!","red")):e++)}),e>0){this.playerHealth=Math.max(this.playerHealth-e,0),this.logMessage(`The monsters hit you for ${e} damage!`);const t=document.getElementById("currentRoom");if(t.classList.add("shake"),setTimeout(()=>{t.classList.remove("shake")},500),this.playerHealth<=0){this.gameOver=!0,this.updateStatsDisplay(),this.showGameOver(),this.logMessage("You have been defeated. Game over!","red");return}this.updateStatsDisplay()}else this.logMessage("The monsters missed their attacks!")}enterUpgradeMode(){this.inUpgradeMode=!0,this.logMessage("Yellow rooms let you upgrade! Choose carefully...","yellow");const e=document.createElement("div");e.className="upgrade-options",e.id="upgradeOptions";const t=document.createElement("button");t.id="btnHealthUpgrade",t.className="btn upgrade-btn",t.textContent=this.hardMode?"Health +1":"Health +2",t.addEventListener("click",()=>this.applyUpgrade("health"));const o=document.createElement("button");if(o.id="btnHealthUpgrade",o.className="btn upgrade-btn",o.textContent="Damage +1",o.addEventListener("click",()=>this.applyUpgrade("damage")),e.appendChild(t),e.appendChild(o),!this.hardMode){const a=document.createElement("button");a.id="btnHealthUpgrade",a.className="btn upgrade-btn",a.textContent="Reveal Trapdoor",a.addEventListener("click",()=>this.applyUpgrade("reveal")),e.appendChild(a)}document.getElementById("actionButtons").appendChild(e),this.updateButtonStates()}applyUpgrade(e){if(!this.inUpgradeMode)return;switch(e){case"health":const o=this.hardMode?1:2;this.playerHealth=Math.min(this.maxHealth,this.playerHealth+o),this.logMessage(`You upgraded your health by ${o} point${o>1?"s":""}!`);break;case"damage":this.playerDamage=Math.min(this.maxDamage,this.playerDamage+1),this.logMessage("You upgraded your damage by 1 point!");break;case"reveal":this.revealTrapdoor=!0,this.logMessage("The location of the trapdoor has been revealed on your map!");break}this.currentRoom.upgradeUsed=!0,this.inUpgradeMode=!1;const t=document.getElementById("upgradeOptions");t&&t.remove(),this.updateStatsDisplay(),this.updateMap(),this.updateButtonStates()}showGameOver(){if(document.getElementById("btnNorth").disabled=!0,document.getElementById("btnSouth").disabled=!0,document.getElementById("btnEast").disabled=!0,document.getElementById("btnWest").disabled=!0,document.getElementById("btnDown").disabled=!0,this.updateButtonStyles(),!document.getElementById("btnRestart")){const e=document.createElement("button");e.id="btnRestart",e.className="btn",e.textContent="Restart Game",e.addEventListener("click",()=>this.restartGame()),document.getElementById("actionButtons").appendChild(e)}document.getElementById("playerNameInput").style.display="block",this.logMessage("Enter your name to save your score!","yellow")}restartGame(){const e=document.getElementById("btnRestart"),t=document.getElementById("gameDisplay");e&&e.remove(),this.level=1,this.playerHealth=3,this.playerDamage=1,this.revealTrapdoor=!1,this.combatMode=!1,this.inUpgradeMode=!1,this.visitedRooms=new Set,this.allRooms=[],this.gameOver=!1,document.getElementById("playerNameInput").style.display="none",this.currentRoom=this.generateLevel(),this.currentRoom.discovered=!0,this.visitedRooms.add(this.currentRoom),t.innerText="",this.logMessage(`Game restarted! You are back at level 1. Hard mode is ${this.hardMode?"ON":"OFF"}.`),this.updateRoomDisplay(),this.updateStatsDisplay(),this.initializeMap(),this.updateMap(),this.updateButtonStates()}updateButtonStyles(){["btnNorth","btnSouth","btnEast","btnWest","btnDown"].forEach(t=>{const o=document.getElementById(t);o.disabled?o.classList.add("btn-disabled"):o.classList.remove("btn-disabled")})}async saveScore(){const e=Math.max(this.playerHealth,0),t=Math.max(this.playerDamage,0),o=this.getPlayerId(),a=document.getElementById("playerName").value.trim().substring(0,15);if(this.level!==1)try{const{data:s}=await m.from("leaderboard").select().match({player_id:o,hard_mode:this.hardMode}).single();let n=!0;if(s){if(!(this.level>s.level||this.level===s.level&&e>s.health||this.level===s.level&&e===s.health&&t>s.damage)){this.logMessage("Kein neuer Highscore - wird nicht gespeichert","yellow");return}const{error:f}=await m.from("leaderboard").delete().eq("player_id",o).eq("hard_mode",this.hardMode);if(f)throw f}const{error:d}=await m.from("leaderboard").insert({player_id:o,player_name:a,level:this.level,health:e,damage:t,hard_mode:this.hardMode,timestamp:new Date().toISOString()});if(d)throw d;this.logMessage(`Neuer Highscore gespeichert! (Level ${this.level})`,"green"),this.restartGame(),document.getElementById("playerNameInput").style.display="none"}catch(s){console.error("Speicherfehler:",s),this.logMessage("Fehler beim Speichern: "+s.message,"red")}}sortAndTrimLeaderboard(e){return e.sort((t,o)=>t.level!==o.level?o.level-t.level:t.health!==o.health?o.health-t.health:o.damage-t.damage),e.length>10?e.slice(0,10):e}setupRealtime(){this.leaderboardChannel&&m.removeChannel(this.leaderboardChannel),this.leaderboardChannel=m.channel("leaderboard").on("postgres_changes",{event:"*",schema:"public",table:"leaderboard",filter:`hard_mode=eq.${this.currentLeaderboard==="hard"}`},()=>this.loadLeaderboard()).subscribe()}async loadLeaderboard(){try{const e=this.currentLeaderboard==="hard"?{hard_mode:!0}:{hard_mode:!1},{data:t,error:o}=await m.from("leaderboard").select("*").match(e).order("level",{ascending:!1}).order("health",{ascending:!1}).order("damage",{ascending:!1}).limit(10);if(o)throw o;this.displayLeaderboard(t||[])}catch(e){console.error("Ladefehler:",e)}}saveLeaderboard(e,t){const o=`dungeonCrawlerLeaderboard_${e}`;localStorage.setItem(o,JSON.stringify(t))}displayLeaderboard(e){const t=document.getElementById("leaderboardBody");t.innerHTML="",e.forEach((o,a)=>{const s=document.createElement("tr"),n=new Date(o.timestamp).toLocaleDateString("de-DE",{day:"2-digit",month:"2-digit",year:"2-digit",hour:"numeric",minute:"2-digit",weekday:"short"});s.innerHTML=`
        <td>${a+1}</td>
        <td>${o.player_name||"Anonymous"}</td>
        <td>${o.level}</td>
        <td>${o.health}</td>
        <td>${o.damage}</td>
        <td>${n}</td>
      `,t.appendChild(s)})}updateRoomDisplay(){const e=document.getElementById("currentRoom"),t=document.getElementById("roomText"),o=document.getElementById("currentLocationText");e.className=`room ${this.currentRoom.color}`,this.currentRoom.color!="red"?t.textContent=`${this.capitalize(this.currentRoom.color)} Room`:t.textContent="";let a="";if(this.currentRoom.color==="gray"?a="Starting Room":this.currentRoom.color==="purple"?a="Trapdoor Room":this.currentRoom.color==="red"?a="Monster Room":this.currentRoom.color==="yellow"?a="Upgrade Room":this.currentRoom.color==="green"&&(a="Safe Room"),o.textContent=a,this.currentRoom.color==="red"&&this.currentRoom.monsters.length>0)this.displayMonsters();else{document.getElementById("monsterContainer").innerHTML="";const s=document.getElementById("combatControls");s&&s.remove()}}updateStatsDisplay(){const e=document.getElementById("playerHealth");e.innerHTML="";for(let o=0;o<this.playerHealth;o++){const a=document.createElement("span");a.className="heart",a.textContent="♥",e.appendChild(a)}const t=document.getElementById("playerDamage");t.innerHTML="";for(let o=0;o<this.playerDamage;o++){const a=document.createElement("span");a.className="sword",a.textContent="⚔",t.appendChild(a)}document.getElementById("healthCap").textContent=`(max: ${this.maxHealth})`,document.getElementById("damageCap").textContent=`(max: ${this.maxDamage})`,document.getElementById("levelInfo").textContent=`Level ${this.level}`}updateButtonStates(){document.getElementById("btnNorth").disabled=!("north"in this.currentRoom.connections)||this.combatMode||this.inUpgradeMode||this.gameOver,document.getElementById("btnSouth").disabled=!("south"in this.currentRoom.connections)||this.combatMode||this.inUpgradeMode||this.gameOver,document.getElementById("btnEast").disabled=!("east"in this.currentRoom.connections)||this.combatMode||this.inUpgradeMode||this.gameOver,document.getElementById("btnWest").disabled=!("west"in this.currentRoom.connections)||this.combatMode||this.inUpgradeMode||this.gameOver,document.getElementById("btnDown").disabled=this.currentRoom.color!=="purple"||this.combatMode||this.inUpgradeMode||this.gameOver,this.updateButtonStyles()}logMessage(e,t="white"){const o=document.getElementById("gameDisplay"),a=document.createElement("p");a.textContent=e,a.style.color=t,o.appendChild(a),o.scrollTop=o.scrollHeight}capitalize(e){return e.charAt(0).toUpperCase()+e.slice(1)}}const w=async()=>{if(!localStorage.getItem("hasVisited")){localStorage.setItem("hasVisited","true");const{data:e,error:t}=await m.from("stats").select("total_visitors").single();if(!t){const o=(e.total_visitors||0)+1;await m.from("stats").update({total_visitors:o}).eq("id",1)}}},L=()=>{m.channel("stats").on("postgres_changes",{event:"UPDATE",schema:"public",table:"stats"},i=>{document.getElementById("totalVisitors").textContent=i.new.total_visitors,document.getElementById("activeUsers").textContent=i.new.active_users}).subscribe()},D=async()=>{if(document.getElementById("totalVisitors")){const{data:i}=await m.from("stats").select("*").single();i&&(document.getElementById("totalVisitors").textContent=i.total_visitors,document.getElementById("activeUsers").textContent=i.active_users)}};(async()=>(await w(),await D(),L()))();document.addEventListener("DOMContentLoaded",()=>{const i=new B;m.rpc("increment_active_users"),window.addEventListener("beforeunload",()=>{m.rpc("decrement_active_users")}),document.getElementById("btnNorth").addEventListener("click",()=>i.move("north")),document.getElementById("btnSouth").addEventListener("click",()=>i.move("south")),document.getElementById("btnEast").addEventListener("click",()=>i.move("east")),document.getElementById("btnWest").addEventListener("click",()=>i.move("west")),document.getElementById("btnDown").addEventListener("click",()=>i.goDown()),document.getElementById("btnSaveScore").addEventListener("click",()=>i.saveScore())});
